package com.susion.rabbit.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.susion.rabbit.base.entities.RabbitAnrInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RABBIT_ANR_INFO".
*/
public class RabbitAnrInfoDao extends AbstractDao<RabbitAnrInfo, Long> {

    public static final String TABLENAME = "RABBIT_ANR_INFO";

    /**
     * Properties of entity RabbitAnrInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property StackStr = new Property(2, String.class, "stackStr", false, "STACK_STR");
        public final static Property PageName = new Property(3, String.class, "pageName", false, "PAGE_NAME");
        public final static Property Invalid = new Property(4, boolean.class, "invalid", false, "INVALID");
        public final static Property FilePath = new Property(5, String.class, "filePath", false, "FILE_PATH");
    }


    public RabbitAnrInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RabbitAnrInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RABBIT_ANR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"STACK_STR\" TEXT," + // 2: stackStr
                "\"PAGE_NAME\" TEXT," + // 3: pageName
                "\"INVALID\" INTEGER NOT NULL ," + // 4: invalid
                "\"FILE_PATH\" TEXT);"); // 5: filePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RABBIT_ANR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RabbitAnrInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String stackStr = entity.getStackStr();
        if (stackStr != null) {
            stmt.bindString(3, stackStr);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(4, pageName);
        }
        stmt.bindLong(5, entity.getInvalid() ? 1L: 0L);
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RabbitAnrInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String stackStr = entity.getStackStr();
        if (stackStr != null) {
            stmt.bindString(3, stackStr);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(4, pageName);
        }
        stmt.bindLong(5, entity.getInvalid() ? 1L: 0L);
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RabbitAnrInfo readEntity(Cursor cursor, int offset) {
        RabbitAnrInfo entity = new RabbitAnrInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stackStr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pageName
            cursor.getShort(offset + 4) != 0, // invalid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // filePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RabbitAnrInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStackStr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPageName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInvalid(cursor.getShort(offset + 4) != 0);
        entity.setFilePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RabbitAnrInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RabbitAnrInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RabbitAnrInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
