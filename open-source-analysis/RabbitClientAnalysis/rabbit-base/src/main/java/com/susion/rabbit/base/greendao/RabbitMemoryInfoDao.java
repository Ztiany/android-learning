package com.susion.rabbit.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.susion.rabbit.base.entities.RabbitMemoryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RABBIT_MEMORY_INFO".
*/
public class RabbitMemoryInfoDao extends AbstractDao<RabbitMemoryInfo, Long> {

    public static final String TABLENAME = "RABBIT_MEMORY_INFO";

    /**
     * Properties of entity RabbitMemoryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property TotalSize = new Property(2, int.class, "totalSize", false, "TOTAL_SIZE");
        public final static Property VmSize = new Property(3, int.class, "vmSize", false, "VM_SIZE");
        public final static Property NativeSize = new Property(4, int.class, "nativeSize", false, "NATIVE_SIZE");
        public final static Property OthersSize = new Property(5, int.class, "othersSize", false, "OTHERS_SIZE");
        public final static Property PageName = new Property(6, String.class, "pageName", false, "PAGE_NAME");
    }


    public RabbitMemoryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RabbitMemoryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RABBIT_MEMORY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"TOTAL_SIZE\" INTEGER NOT NULL ," + // 2: totalSize
                "\"VM_SIZE\" INTEGER NOT NULL ," + // 3: vmSize
                "\"NATIVE_SIZE\" INTEGER NOT NULL ," + // 4: nativeSize
                "\"OTHERS_SIZE\" INTEGER NOT NULL ," + // 5: othersSize
                "\"PAGE_NAME\" TEXT);"); // 6: pageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RABBIT_MEMORY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RabbitMemoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
        stmt.bindLong(3, entity.getTotalSize());
        stmt.bindLong(4, entity.getVmSize());
        stmt.bindLong(5, entity.getNativeSize());
        stmt.bindLong(6, entity.getOthersSize());
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(7, pageName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RabbitMemoryInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
        stmt.bindLong(3, entity.getTotalSize());
        stmt.bindLong(4, entity.getVmSize());
        stmt.bindLong(5, entity.getNativeSize());
        stmt.bindLong(6, entity.getOthersSize());
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(7, pageName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RabbitMemoryInfo readEntity(Cursor cursor, int offset) {
        RabbitMemoryInfo entity = new RabbitMemoryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.getInt(offset + 2), // totalSize
            cursor.getInt(offset + 3), // vmSize
            cursor.getInt(offset + 4), // nativeSize
            cursor.getInt(offset + 5), // othersSize
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // pageName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RabbitMemoryInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTotalSize(cursor.getInt(offset + 2));
        entity.setVmSize(cursor.getInt(offset + 3));
        entity.setNativeSize(cursor.getInt(offset + 4));
        entity.setOthersSize(cursor.getInt(offset + 5));
        entity.setPageName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RabbitMemoryInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RabbitMemoryInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RabbitMemoryInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
