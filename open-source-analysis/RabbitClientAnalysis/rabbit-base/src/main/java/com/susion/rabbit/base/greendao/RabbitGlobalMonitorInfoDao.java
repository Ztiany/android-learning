package com.susion.rabbit.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.susion.rabbit.base.entities.RabbitAppPerformanceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RABBIT_GLOBAL_MONITOR_INFO".
*/
public class RabbitGlobalMonitorInfoDao extends AbstractDao<RabbitAppPerformanceInfo, Long> {

    public static final String TABLENAME = "RABBIT_GLOBAL_MONITOR_INFO";

    /**
     * Properties of entity RabbitGlobalMonitorInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property FpsIds = new Property(2, String.class, "fpsIds", false, "FPS_IDS");
        public final static Property MemoryIds = new Property(3, String.class, "memoryIds", false, "MEMORY_IDS");
        public final static Property AppStartId = new Property(4, String.class, "appStartId", false, "APP_START_ID");
        public final static Property PageSpeedIds = new Property(5, String.class, "pageSpeedIds", false, "PAGE_SPEED_IDS");
        public final static Property BlockIds = new Property(6, String.class, "blockIds", false, "BLOCK_IDS");
        public final static Property SlowMethodIds = new Property(7, String.class, "slowMethodIds", false, "SLOW_METHOD_IDS");
        public final static Property EndTime = new Property(8, Long.class, "endTime", false, "END_TIME");
        public final static Property IsRunning = new Property(9, boolean.class, "isRunning", false, "IS_RUNNING");
    }


    public RabbitGlobalMonitorInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RabbitGlobalMonitorInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RABBIT_GLOBAL_MONITOR_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"FPS_IDS\" TEXT," + // 2: fpsIds
                "\"MEMORY_IDS\" TEXT," + // 3: memoryIds
                "\"APP_START_ID\" TEXT," + // 4: appStartId
                "\"PAGE_SPEED_IDS\" TEXT," + // 5: pageSpeedIds
                "\"BLOCK_IDS\" TEXT," + // 6: blockIds
                "\"SLOW_METHOD_IDS\" TEXT," + // 7: slowMethodIds
                "\"END_TIME\" INTEGER," + // 8: endTime
                "\"IS_RUNNING\" INTEGER NOT NULL );"); // 9: isRunning
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RABBIT_GLOBAL_MONITOR_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RabbitAppPerformanceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String fpsIds = entity.getFpsIds();
        if (fpsIds != null) {
            stmt.bindString(3, fpsIds);
        }
 
        String memoryIds = entity.getMemoryIds();
        if (memoryIds != null) {
            stmt.bindString(4, memoryIds);
        }
 
        String appStartId = entity.getAppStartId();
        if (appStartId != null) {
            stmt.bindString(5, appStartId);
        }
 
        String pageSpeedIds = entity.getPageSpeedIds();
        if (pageSpeedIds != null) {
            stmt.bindString(6, pageSpeedIds);
        }
 
        String blockIds = entity.getBlockIds();
        if (blockIds != null) {
            stmt.bindString(7, blockIds);
        }
 
        String slowMethodIds = entity.getSlowMethodIds();
        if (slowMethodIds != null) {
            stmt.bindString(8, slowMethodIds);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime);
        }
        stmt.bindLong(10, entity.getIsRunning() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RabbitAppPerformanceInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String fpsIds = entity.getFpsIds();
        if (fpsIds != null) {
            stmt.bindString(3, fpsIds);
        }
 
        String memoryIds = entity.getMemoryIds();
        if (memoryIds != null) {
            stmt.bindString(4, memoryIds);
        }
 
        String appStartId = entity.getAppStartId();
        if (appStartId != null) {
            stmt.bindString(5, appStartId);
        }
 
        String pageSpeedIds = entity.getPageSpeedIds();
        if (pageSpeedIds != null) {
            stmt.bindString(6, pageSpeedIds);
        }
 
        String blockIds = entity.getBlockIds();
        if (blockIds != null) {
            stmt.bindString(7, blockIds);
        }
 
        String slowMethodIds = entity.getSlowMethodIds();
        if (slowMethodIds != null) {
            stmt.bindString(8, slowMethodIds);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(9, endTime);
        }
        stmt.bindLong(10, entity.getIsRunning() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RabbitAppPerformanceInfo readEntity(Cursor cursor, int offset) {
        RabbitAppPerformanceInfo entity = new RabbitAppPerformanceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fpsIds
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memoryIds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // appStartId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pageSpeedIds
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // blockIds
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // slowMethodIds
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // endTime
            cursor.getShort(offset + 9) != 0 // isRunning
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RabbitAppPerformanceInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFpsIds(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemoryIds(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAppStartId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPageSpeedIds(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBlockIds(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSlowMethodIds(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsRunning(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RabbitAppPerformanceInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RabbitAppPerformanceInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RabbitAppPerformanceInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
