package com.susion.rabbit.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.susion.rabbit.base.entities.RabbitBlockFrameInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RABBIT_BLOCK_FRAME_INFO".
*/
public class RabbitBlockFrameInfoDao extends AbstractDao<RabbitBlockFrameInfo, Long> {

    public static final String TABLENAME = "RABBIT_BLOCK_FRAME_INFO";

    /**
     * Properties of entity RabbitBlockFrameInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BlockFrameStrackTraceStrList = new Property(1, String.class, "blockFrameStrackTraceStrList", false, "BLOCK_FRAME_STRACK_TRACE_STR_LIST");
        public final static Property BlockIdentifier = new Property(2, String.class, "blockIdentifier", false, "BLOCK_IDENTIFIER");
        public final static Property CostTime = new Property(3, Long.class, "costTime", false, "COST_TIME");
        public final static Property Time = new Property(4, Long.class, "time", false, "TIME");
        public final static Property PageName = new Property(5, String.class, "pageName", false, "PAGE_NAME");
    }


    public RabbitBlockFrameInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RabbitBlockFrameInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RABBIT_BLOCK_FRAME_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BLOCK_FRAME_STRACK_TRACE_STR_LIST\" TEXT," + // 1: blockFrameStrackTraceStrList
                "\"BLOCK_IDENTIFIER\" TEXT," + // 2: blockIdentifier
                "\"COST_TIME\" INTEGER," + // 3: costTime
                "\"TIME\" INTEGER," + // 4: time
                "\"PAGE_NAME\" TEXT);"); // 5: pageName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RABBIT_BLOCK_FRAME_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RabbitBlockFrameInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String blockFrameStrackTraceStrList = entity.getBlockFrameStrackTraceStrList();
        if (blockFrameStrackTraceStrList != null) {
            stmt.bindString(2, blockFrameStrackTraceStrList);
        }
 
        String blockIdentifier = entity.getBlockIdentifier();
        if (blockIdentifier != null) {
            stmt.bindString(3, blockIdentifier);
        }
 
        Long costTime = entity.getCostTime();
        if (costTime != null) {
            stmt.bindLong(4, costTime);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(6, pageName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RabbitBlockFrameInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String blockFrameStrackTraceStrList = entity.getBlockFrameStrackTraceStrList();
        if (blockFrameStrackTraceStrList != null) {
            stmt.bindString(2, blockFrameStrackTraceStrList);
        }
 
        String blockIdentifier = entity.getBlockIdentifier();
        if (blockIdentifier != null) {
            stmt.bindString(3, blockIdentifier);
        }
 
        Long costTime = entity.getCostTime();
        if (costTime != null) {
            stmt.bindLong(4, costTime);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String pageName = entity.getPageName();
        if (pageName != null) {
            stmt.bindString(6, pageName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RabbitBlockFrameInfo readEntity(Cursor cursor, int offset) {
        RabbitBlockFrameInfo entity = new RabbitBlockFrameInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // blockFrameStrackTraceStrList
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // blockIdentifier
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // costTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // pageName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RabbitBlockFrameInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlockFrameStrackTraceStrList(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBlockIdentifier(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCostTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPageName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RabbitBlockFrameInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RabbitBlockFrameInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RabbitBlockFrameInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
